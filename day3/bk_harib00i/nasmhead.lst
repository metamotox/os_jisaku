     1                                  ; haribote-os boot assembly code
     2                                  ; TAB=4
     3                                  
     4                                  BOTPAK	EQU		0x00280000	; the address of loading bootpack
     5                                  DSKCAC	EQU		0x00100000	; the address of disk cache
     6                                  DSKCAC0	EQU		0x00008000	; the address of disk cache(when real mode)
     7                                  
     8                                  ; Information related to BOOT_INFO
     9                                  CYLS	EQU		0x0ff0		; set by boot sector
    10                                  LEDS	EQU		0x0ff1		; LED color
    11                                  VMODE	EQU		0x0ff2		; How many bit colors ?
    12                                  SCRNX	EQU		0x0ff4		; resolution X
    13                                  SCRNY	EQU		0x0ff6		; resolution Y
    14                                  VRAM	EQU		0x0ff8		; start address of Graphic buffer
    15                                  		ORG		0xc200
    16                                  
    17                                  ; display mode setting
    18                                  
    19 00000000 B013                    		MOV	AL,0x13			; mode settings, VGA graphics 320x200x8bit color
    20 00000002 B400                    		MOV	AH,0x00			; fixed value of AH
    21 00000004 CD10                    		INT	0x10			; video mode setting operation
    22 00000006 C606F20F08              		MOV	BYTE [VMODE],8		; memorize video mode(c language use this information)
    23 0000000B C706F40F4001            		MOV	WORD [SCRNX],320	; memorize resolution X 
    24 00000011 C706F60FC800            		MOV	WORD [SCRNY],200	; memorize resolution Y
    25 00000017 66C706F80F00000A00      		MOV	DWORD [VRAM],0x000a0000	; what does 0x000a0000 mean ?
    26                                  
    27                                  ; tell from BIOS the keyboard LED status
    28                                  
    29 00000020 B402                    		MOV	AH,0x02
    30 00000022 CD16                    		INT	0x16		; keyboard BIOS
    31 00000024 A2F10F                  		MOV	[LEDS],AL
    32                                  
    33                                  ; configuration not to accept interrupt to PIC
    34                                  
    35 00000027 B0FF                    		MOV	AL,0xff
    36 00000029 E621                    		OUT	0x21,AL
    37 0000002B 90                      		NOP
    38 0000002C E6A1                    		OUT	0xa1,AL
    39 0000002E FA                      		CLI			; ban to interrupt as cpu level
    40                                  
    41                                  ; A20GATE setting to be able to access more than 1MB memory from cpu
    42 0000002F E8B500                  		CALL	waitkbdout
    43 00000032 B0D1                    		MOV	AL,0xd1
    44 00000034 E664                    		OUT	0x64,AL
    45 00000036 E8AE00                  		CALL	waitkbdout
    46 00000039 B0DF                    		MOV	AL,0xdf
    47 0000003B E660                    		OUT	0x60,AL
    48 0000003D E8A700                  		CALL	waitkbdout
    49                                  
    50                                  ; to be protect mode
    51                                  
    52                                  ; [INSTRSET "i486p"]
    53 00000040 0F0116[3401]            		LGDT	[GDTR0]
    54 00000045 0F20C0                  		MOV	EAX,CR0		; get current value of CR0
    55 00000048 6625FFFFFF7F            		AND	EAX,0x7fffffff	; set zero to bit31(ban the paging)
    56 0000004E 6683C801                		OR	EAX,0x00000001	; set 1 to bit0(for changing mode to protected mode)
    57 00000052 0F22C0                  		MOV	CR0,EAX		; chage value of CR0
    58 00000055 EB00                    		JMP	pipelineflush
    59                                  
    60                                  pipelineflush:				; initialization segment registers
    61 00000057 B80800                  		MOV	AX,1*8		; all segment registers set 0x8 value
    62 0000005A 8ED8                    		MOV	DS,AX
    63 0000005C 8EC0                    		MOV	ES,AX
    64 0000005E 8EE0                    		MOV	FS,AX
    65 00000060 8EE8                    		MOV	GS,AX
    66 00000062 8ED0                    		MOV	SS,AX
    67                                  
    68                                  ; transferring bootpack
    69 00000064 66BE[50010000]          		MOV	ESI,bootpack	; set bootpack label address to source index register
    70 0000006A 66BF00002800            		MOV	EDI,BOTPAK	; set 0x100000 to destination index register
    71 00000070 66B900000200            		MOV	ECX,512*1024/4	; set 0x20000 to ecx
    72 00000076 E87500                  		CALL	memcpy		; call memcpy function(following exists this label)
    73                                  
    74                                  ; transferring disk data to original position
    75                                  ; first, boot sector
    76                                  
    77 00000079 66BE007C0000            		MOV	ESI,0x7c00	; set ipl start address to ESI
    78 0000007F 66BF00001000            		MOV	EDI,DSKCAC	; set disk cache start address to EDI
    79 00000085 66B980000000            		MOV	ECX,512/4	; set 0x80 to ecx
    80 0000008B E86000                  		CALL	memcpy
    81                                  
    82                                  ; next, other things
    83                                  ; cache address is after the boot sector data(boot sector size is 512 byte so that...)		
    84 0000008E 66BE00820000            		MOV	ESI,DSKCAC0+512	; set 0x8000+0x200 to ESI(real mode disk cache)
    85 00000094 66BF00021000            		MOV	EDI,DSKCAC+512	; set 0x100000+0x200 to EDI(disk cache)
    86 0000009A 66B900000000            		MOV	ECX,0		; initialize ecx register
    87 000000A0 8A0EF00F                		MOV	CL,BYTE [CYLS]	; copy the value stored 0x0ff0 address (Byte size value)
    88 000000A4 6669C900120000          		IMUL	ECX,512*18*2/4	; singed multiply operation  
    89 000000AB 6681E980000000          		SUB	ECX,512/4	; 
    90 000000B2 E83900                  		CALL	memcpy
    91                                  
    92                                  ; finish to descript that it must do on nasmhead code.
    93                                  ; so, other code is bootpack 
    94                                  
    95                                  ; launch bootpack
    96 000000B5 66BB00002800            		MOV	EBX,BOTPAK
    97 000000BB 66678B4B10              		MOV	ECX,[EBX+16]
    98 000000C0 6683C103                		ADD	ECX,3		; ECX +=3
    99 000000C4 66C1E902                		SHR	ECX,2		; ECX /=4
   100 000000C8 7410                    		JZ	skip
   101 000000CA 66678B7314              		MOV	ESI,[EBX+20]
   102 000000CF 6601DE                  		ADD	ESI,EBX
   103 000000D2 66678B7B0C              		MOV	EDI,[EBX+12]
   104 000000D7 E81400                  		CALL	memcpy
   105                                  
   106                                  skip:
   107 000000DA 66678B630C              		MOV	ESP,[EBX+12]		; initialize stack pointer
   108 000000DF 66EA1B0000001000        		JMP	DWORD 2*8:0x0000001b
   109                                  
   110                                  waitkbdout:
   111 000000E7 E464                    		IN	AL,0x64
   112 000000E9 2402                    		AND	AL,0x02
   113 000000EB 75FA                    		JNZ	waitkbdout
   114 000000ED C3                      		RET
   115                                  
   116                                  memcpy:
   117 000000EE 66678B06                		MOV	EAX,[ESI]
   118 000000F2 6683C604                		ADD	ESI,4
   119 000000F6 66678907                		MOV	[EDI],EAX
   120 000000FA 6683C704                		ADD	EDI,4
   121 000000FE 6683E901                		SUB	ECX,1
   122 00000102 75EA                    		JNZ	memcpy
   123 00000104 C3                      		RET
   124                                  
   125 00000105 <res 0000000B>          		ALIGNB	16
   126          ******************       warning: uninitialized space declared in .text section: zeroing
   127                                  
   128                                  GDT0:
   129 00000110 00<rept>                		TIMES	18	DB	0
   130 00000122 FFFF00000092CF00        		DW	0xffff,0x0000,0x9200,0x00cf	; writable segment - 32bit
   131 0000012A FFFF0000289A4700        		DW	0xffff,0x0000,0x9a28,0x0047	; executable segment - 32bit(bootpack)
   132 00000132 0000                    		DW	0
   133                                  
   134                                  
   135                                  GDTR0:
   136 00000134 00<rept>                		TIMES	8	DB	0		; null selector
   137 0000013C 1700                    		DW	8*3-1
   138 0000013E [10010000]              		DD	GDT0
   139 00000142 <res 0000000E>          		ALIGNB	16
   140          ******************       warning: uninitialized space declared in .text section: zeroing
   141                                  bootpack:
